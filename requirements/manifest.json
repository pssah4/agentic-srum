{
  "project": {
    "name": "Obsidian Properties Manager",
    "description": "Python app (CLI + Streamlit UI) for managing YAML frontmatter properties in Obsidian Markdown notes with optional LLM-generated summaries",
    "version": "1.0.0-MVP",
    "created": "2025-09-27",
    "last_updated": "2025-09-27"
  },
  "epics": [
    {
      "id": "EPIC-core-property-management",
      "name": "Core Property-Management",
      "status": "Planned",
      "priority": "Must",
      "file_path": "epics/EPIC-core-property-management-v1.md",
      "features": [
        "FEAT-core-property-management-file-reading",
        "FEAT-core-property-management-write-operations",
        "FEAT-core-property-management-operations-logic", 
        "FEAT-core-property-management-file-selection"
      ]
    },
    {
      "id": "EPIC-llm-integration",
      "name": "LLM-Integration",
      "status": "Planned",
      "priority": "Should",
      "file_path": "epics/EPIC-llm-integration-v1.md",
      "features": [
        "FEAT-llm-integration-openai-api",
        "FEAT-llm-integration-summary-workflow"
      ]
    },
    {
      "id": "EPIC-user-interface",
      "name": "User Interface",
      "status": "Planned", 
      "priority": "Must",
      "file_path": "epics/EPIC-user-interface-v1.md",
      "features": [
        "FEAT-user-interface-action-selection",
        "FEAT-user-interface-dynamic-forms",
        "FEAT-user-interface-file-management",
        "FEAT-user-interface-cli"
      ]
    },
    {
      "id": "EPIC-data-safety-performance",
      "name": "Data Safety & Performance", 
      "status": "Planned",
      "priority": "Must",
      "file_path": "epics/EPIC-data-safety-performance-v1.md",
      "features": [
        "FEAT-data-safety-performance-backup-system",
        "FEAT-data-safety-performance-output-management",
        "FEAT-data-safety-performance-async-processing"
      ]
    },
    {
      "id": "EPIC-quality-reliability",
      "name": "Quality & Reliability",
      "status": "Planned",
      "priority": "Must", 
      "file_path": "epics/EPIC-quality-reliability-v1.md",
      "features": [
        "FEAT-quality-reliability-error-handling-logging",
        "FEAT-quality-reliability-testing-documentation"
      ]
    }
  ],
  "features": [
    {
      "id": "FEAT-core-property-management-file-reading",
      "name": "Markdown File Reading",
      "epic_id": "EPIC-core-property-management",
      "status": "Planned",
      "priority": "Must",
      "file_path": "features/FEAT-core-property-management-file-reading-v1.md",
      "user_stories": [
        "US-file-reading-01",
        "US-file-reading-02",
        "US-file-reading-03",
        "US-file-reading-04", 
        "US-file-reading-05"
      ]
    }
  ],
  "user_stories": [
    {
      "id": "US-file-reading-01",
      "name": "Parse Valid YAML Frontmatter",
      "feature_id": "FEAT-core-property-management-file-reading",
      "status": "Planned",
      "priority": "Must",
      "effort_points": 0.5,
      "file_path": "stories/US-file-reading-01-v1.md"
    },
    {
      "id": "US-file-reading-02", 
      "name": "Handle Files Without Frontmatter",
      "feature_id": "FEAT-core-property-management-file-reading",
      "status": "Planned",
      "priority": "Must", 
      "effort_points": 0.5,
      "file_path": "stories/US-file-reading-02-v1.md"
    }
  ],
  "definition_of_done": {
    "functional_criteria": [
      "Property steht korrekt im YAML Frontmatter der Ziel-Datei(en)",
      "Backup erstellt: Original-Datei existiert in /backup/ mit Timestamp vor jeder Änderung",
      "LLM-Summary: Summary-Property mit max. 2 Sätzen im Frontmatter, API-Call erfolgreich",
      "File-Operations: In-place oder Copy-to-Output funktioniert wie gewählt",
      "Folder-Auswahl: Input/Output-Ordner wählbar, Pfade werden korrekt angezeigt",
      "Batch-Processing: Progress-Bar sichtbar, mehrere Files parallel verarbeitet"
    ],
    "quality_criteria": [
      "Unit Tests: Geschrieben und alle Tests bestehen",
      "Error Handling: API-Fehler, defekte YAML, File-Zugriffsfehler abgefangen", 
      "Logging: Alle Operationen protokolliert (Info/Warning/Error)",
      "Performance: Async/parallel Processing bei 1000+ Files funktioniert",
      "Cross-Platform: Läuft auf Windows & Linux (WSL)"
    ],
    "documentation_criteria": [
      "README: Installation, Usage, Examples",
      "Code-Kommentierung: Erklärt das 'Warum' der gewählten Implementierung",
      "API-Integration: OpenAI-Setup dokumentiert"
    ]
  },
  "technical_stack": {
    "languages": ["Python"],
    "frameworks": ["Streamlit", "Click"],
    "libraries": ["PyYAML", "OpenAI", "asyncio", "aiofiles", "pathlib"],
    "platforms": ["Windows", "Linux (WSL)"],
    "apis": ["OpenAI GPT-4.1"]
  },
  "constraints": {
    "scope": "MVP - Standalone app, no Obsidian plugin integration",
    "file_types": [".md"],
    "encoding": "UTF-8",
    "max_file_size": "~30 A4 pages",
    "vault_size": "1000+ files supported",
    "llm_summary_length": "Max 2 sentences"
  }
}